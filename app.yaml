Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
  PublicSubnet1Id:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 1 ID
  PublicSubnet2Id:
    Type: AWS::EC2::Subnet::Id  
    Description: Public Subnet 2 ID
  PrivateSubnet1Id:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 1 ID
  PrivateSubnet2Id:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 2 ID
    
Resources:

  # Bastion Server Security Group
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # Bastion Server 1
  BastionServer1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0bb84b8ffd87024d8  # Replace with the desired AMI ID for Amazon Linux 2
      InstanceType: t2.micro
      KeyName: vockey  # Replace with your EC2 key pair name
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      SubnetId: !Ref PublicSubnet1Id
      Tags:
        - Key: Name
          Value: BastionServer1

  # Bastion Server 2
  BastionServer2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0aa7d40eeae50c9a9  # Replace with the desired AMI ID for Amazon Linux 2
      InstanceType: t2.micro
      KeyName: vockey  # Replace with your EC2 key pair name
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      SubnetId: !Ref PublicSubnet2Id
      Tags:
        - Key: Name
          Value: BastionServer2
  # RDS resources
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS
      SubnetIds: 
        - !Ref PrivateSubnet1Id
        - !Ref PrivateSubnet2Id
        
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL traffic
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
        
  RDSReadReplica:
    Type: AWS::RDS::DBInstance
    Properties:
      SourceDBInstanceIdentifier: wordpress-app-db
      DBInstanceClass: db.t3.micro
      PubliclyAccessible: false
      AvailabilityZone: us-east-1b
      
  # ELB resources  
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          
  ELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
        
  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
      LoadBalancerArn: !Ref ELB
      Port: 80
      Protocol: HTTP
      
  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /wp-admin
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPCId
      
  # S3 bucket  
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'wordpress-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        
  # Security group        
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp  
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          
  # Auto Scaling group
  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: Wordpress-WebServer
      LaunchTemplateData:
        ImageId: ami-0bb84b8ffd87024d8
        InstanceType: t2.micro
        KeyName: vockey
        SecurityGroupIds: 
          - !Ref WebServerSecurityGroup
        IamInstanceProfile: 
          Arn: arn:aws:iam::520365614030:instance-profile/LabInstanceProfile
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              sudo yum -y update
              sudo yum -y localinstall https://dev.mysql.com/get/mysql80-community-release-el9-4.noarch.rpm
              sudo yum -y install mysql mysql-community-client
              sudo yum -y install php httpd
              sudo dnf install php-mysqlnd -y
              sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm --skip-broken
              sudo yum -y install https://rpms.remirepo.net/enterprise/remi-release-7.rpm --skip-broken
              sudo yum -y install yum-utils
              sudo yum-config-manager --enable remi-php74
              sudo yum -y update
              sudo yum -y install php php-cli php-mbstring php-xml
              wget http://wordpress.org/latest.tar.gz -P /tmp/
              tar zxvf /tmp/latest.tar.gz -C /tmp
              sudo cp -r /tmp/wordpress/* /var/www/html/
              sudo chown apache:apache -R /var/www/html
              sudo systemctl enable httpd.service
              sudo systemctl start httpd.service
              
  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: WebServerLaunchTemplate
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1Id
        - !Ref PrivateSubnet2Id
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref ELBTargetGroup
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      
  WebServerScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70.0
        
  WebServerScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy  
    Properties:
      AutoScalingGroupName: !Ref WebServerASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 25.0
        
Outputs:
  WebsiteURL:
    Description: WordPress Website URL
    Value: !Join ['', ['http://', !GetAtt ELB.DNSName]]